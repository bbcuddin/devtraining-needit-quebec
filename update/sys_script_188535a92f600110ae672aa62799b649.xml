<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>false</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>sc_request</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Cascade Request Approval to Request Item</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[/**
 * The Request has been approved, rejected or cancelled.  Propogate this state
 * change down to the request items.
 */
cascadeRequestApproval();

function cascadeRequestApproval() {
    var gr = new GlideRecord("sc_req_item");
    gr.addQuery("request", current.sys_id);
    gr.query();

    while (gr.next()) {
        // We handle this differently for delivery plans vs. workflows
        if (hasWorkflow(gr))
            cascadeRequestApprovalWorkflow(gr);
        else if (hasFlowDesigner(gr))
            cascadeRequestApprovalFlowDesigner(gr);
        else
            cascadeRequestApprovalDeliveryPlan(gr);

        gr.update();
    }
}

/**
 * Cascade the request approval to the request item:
 *
 *   approved -> if item is waiting for approval, get first stage of the delivery plan
 *   rejected -> mark item as Request Cancelled
 */
function cascadeRequestApprovalDeliveryPlan(gr) {
    if (gr.cat_item.delivery_plan.nil())
        return;

    gr.approval = current.approval;
    if (gr.stage == "waiting_for_approval" && current.approval == "approved")
        gr.stage = getNextStage(gr);
    else if (current.approval == 'rejected') {
        gr.stage = 'Request Cancelled';
        gr.state = 4;
    }
}

function cascadeRequestApprovalWorkflow(gr) {
    if (gr.stage == "waiting_for_approval" && current.approval == "approved") {
        gr.approval = "requested";
        gr.stage = "request_approved";
    } else if (current.approval == 'rejected') {
        gr.approval = "rejected";
        gr.stage = "Request Cancelled";
        gr.state = 4;
    }
}

function cascadeRequestApprovalFlowDesigner(gr) {
    if (gr.stage == "waiting_for_approval" && current.approval == "approved") {
        gr.approval = "requested";
        gr.stage = "request_approved";
    } else if (current.approval == 'rejected') {
        gr.approval = "rejected";
        gr.stage = "Request Cancelled";
        gr.state = 4;
    }
}

function hasWorkflow(gr) {
    // Check if Catalog Item is using Workflow
    if (gr.cat_item.workflow && !gr.cat_item.workflow.nil())
        return true;

    return false;
}

function hasFlowDesigner(gr) {
    // Check if Catalog Item is using Workflow
    if (gr.cat_item.flow_designer_flow && !gr.cat_item.flow_designer_flow.nil())
        return true;

    return false;
}

function getNextStage(reqitem) {
    // return the first delivery task
    var nextStage = "nothing";
    var planID = GlideappDeliveryPlan.resolvePlanID(reqitem);
    var gr = new GlideRecord("sc_cat_item_delivery_task");
    gr.addQuery("delivery_plan", planID);
    gr.orderBy("order");
    gr.query();
    if (gr.next())
        nextStage = gr.name.getDisplayValue();

    return nextStage;
}]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-12-20 16:40:07</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>188535a92f600110ae672aa62799b649</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name>Cascade Request Approval to Request Item</sys_name>
        <sys_overrides/>
        <sys_package display_value="NeedIt" source="x_58872_needit">6ead8e780f603200cd674f8ce1050ed1</sys_package>
        <sys_policy/>
        <sys_scope display_value="NeedIt">6ead8e780f603200cd674f8ce1050ed1</sys_scope>
        <sys_update_name>sys_script_188535a92f600110ae672aa62799b649</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-12-20 16:41:08</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=188535a92f600110ae672aa62799b649"/>
</record_update>
